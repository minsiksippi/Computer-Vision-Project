1. How can we improve the edge detection performance? Explain it by using the parameters given in the provided program, ‘OpenCV-Canny-Edge-Detection.’

In order to improve performance in Cany Edge Detection, low error rates and good localization are required. In Canny Edge Detection, two threshold values can be adjusted to detect the exact edge.
In a given 'Canny_Edge_detect.py', parameters 'lo' and 'hi' represent threshold. If it is higher than the 'hi', it becomes a strong edge and is always detected as an edge. If it is less than 'lo', it is not an edge, and if it is between 'hi' and 'lo', it is called a weak edge. If it is connected to a strong edge, it is detected as an edge. Each image has a different threshold value for finding the exact edge. So you have to change 'hi' and 'lo' several times to find the best threshold value.
In addition to the two thresholds, performance can be improved through changes in the Gaussian filter array variable 'b' declared in the function 'gaussian filter'. The change in the variable 'b' represents the change in sigma and kernel size of the Gaussian filter. As the sigma value increases in the Gaussian filter, the details decrease, and the number of edges detected decreases.
In conclusion, if the threshold parameter and Gaussian filter parameter are properly adjusted, edge detection performance in canny edge detection may be improved.

2. How can we improve the keypoint matching performance? Explain it by using the parameters given in the provided program, ‘Harris-Corner-Detector’

Harris Corner Detector expressed an equation including the matrix 𝑀(𝑥, 𝑦). The equation is expressed as follows. In the above equation, the image matrix 𝑀(𝑥, 𝑦) is a symmetric matrix with positive real eigenvalues.
If the two eigenvalues of the matrix 𝑀 are 𝜆!,𝜆", respectively, the Harris corner response function R is defined as follows.
At this time, if R>0, it can be referred to as a corner point. In order to increase the performance of keypoint matching, accurate corner point measurement and low error rate are required. That is, as the constant k increases, R decreases, and the probability of finding the wrong corner decreases. However, if k becomes too large, it is difficult to measure the exact corner point itself. So, I think it is necessary to change the value of k in the effective range. Therefore, if we change the parameter k of the function ‘detect_corners’ at ‘Harris.py’, we can improve the performance of keypoint matching.
In addition to parameter 'k', parameter 'thresh' and 'nms_kernel_size' of function 'detect_corners' can also have an effect. The higher the threshold value, the higher the performance of keypoint matching along with the lower error rate. However, like 'k', the 'thresh' value, which is too high, causes false detection.
In conclusion, if the parameters mentioned above are adjusted appropriately, the performance of keypoint matching in Harris Corner Detector may be improved.